/*
 * CredofasterPartnerApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package ke.co.credofaster.partner.apitest.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import ke.co.credofaster.partner.apitest.*;
import ke.co.credofaster.partner.apitest.models.*;
import ke.co.credofaster.partner.apitest.exceptions.*;
import ke.co.credofaster.partner.apitest.http.client.HttpClient;
import ke.co.credofaster.partner.apitest.http.client.HttpContext;
import ke.co.credofaster.partner.apitest.http.request.HttpRequest;
import ke.co.credofaster.partner.apitest.http.response.HttpResponse;
import ke.co.credofaster.partner.apitest.http.response.HttpStringResponse;
import ke.co.credofaster.partner.apitest.http.client.APICallBack;
import ke.co.credofaster.partner.apitest.controllers.syncwrapper.APICallBackCatcher;

public class EventsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static EventsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the EventsController class 
     */
    public static EventsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new EventsController();
                }
            }
        }
        return instance;
    }

    /**
     * A callback to receive the below Callbacks
     * @param    request    Required parameter: Example: 
     * @return    Returns the RegisterCallbackResponse response from the API call 
     */
    public RegisterCallbackResponse registerCallback(
                final RegisterCallbackRequest request
    ) throws Throwable {

        HttpRequest _request = _buildRegisterCallbackRequest(request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleRegisterCallbackResponse(_context);
    }

    /**
     * A callback to receive the below Callbacks
     * @param    request    Required parameter: Example: 
     */
    public void registerCallbackAsync(
                final RegisterCallbackRequest request,
                final APICallBack<RegisterCallbackResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildRegisterCallbackRequest(request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            RegisterCallbackResponse returnValue = _handleRegisterCallbackResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for registerCallback
     */
    private HttpRequest _buildRegisterCallbackRequest(
                final RegisterCallbackRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri(Servers.ENUM_DEFAULT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/RegisterCallback");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("ApiKey", Configuration.apiKey);
        _headers.put("ClientId", Configuration.clientId);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for registerCallback
     * @return An object of type RegisterCallbackResponse
     */
    private RegisterCallbackResponse _handleRegisterCallbackResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RegisterCallbackResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RegisterCallbackResponse>(){});

        return _result;
    }

    /**
     * You are required to provide a HTTP/HTTPS endpoint, to which we will publish various events. 
     * This Endpoint will be hosted on the CLIENT's Environment. If no endpoint is provided, we are not liable to any missing events. 
     * NOTE: A DETAILED PDF of all Events is shared on request. It contains application events, System Health Events and Alerts on the same.
     * @param    payloadToReceive    Required parameter: Sample Payload: {"EventId":"123456789","EventType":"QUEUED","RequestId":"A09797a11e2564061b859781b18bb34dd","EventData":{}}
     * @return    Returns the EventCallbackFeedback response from the API call 
     */
    public EventCallbackFeedback clientEventFeedback(
                final EventCallbackPayload payloadToReceive
    ) throws Throwable {

        HttpRequest _request = _buildClientEventFeedbackRequest(payloadToReceive);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleClientEventFeedbackResponse(_context);
    }

    /**
     * You are required to provide a HTTP/HTTPS endpoint, to which we will publish various events. 
     * This Endpoint will be hosted on the CLIENT's Environment. If no endpoint is provided, we are not liable to any missing events. 
     * NOTE: A DETAILED PDF of all Events is shared on request. It contains application events, System Health Events and Alerts on the same.
     * @param    payloadToReceive    Required parameter: Sample Payload: {"EventId":"123456789","EventType":"QUEUED","RequestId":"A09797a11e2564061b859781b18bb34dd","EventData":{}}
     */
    public void clientEventFeedbackAsync(
                final EventCallbackPayload payloadToReceive,
                final APICallBack<EventCallbackFeedback> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildClientEventFeedbackRequest(payloadToReceive);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            EventCallbackFeedback returnValue = _handleClientEventFeedbackResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for clientEventFeedback
     */
    private HttpRequest _buildClientEventFeedbackRequest(
                final EventCallbackPayload payloadToReceive) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri(Servers.MY_CALLBACK_ENDPOINT);

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/my_endpoint_here");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(payloadToReceive));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for clientEventFeedback
     * @return An object of type EventCallbackFeedback
     */
    private EventCallbackFeedback _handleClientEventFeedbackResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        EventCallbackFeedback _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<EventCallbackFeedback>(){});

        return _result;
    }

}
